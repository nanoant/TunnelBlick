# This Makefile is 'included' in other makefiles after they set up standard variables for the version of Xcode that is being used
# It shouldn't be called by anything other than automated scripts

TOPDIR = $(PWD)

#######################################################################################
# Define folders that contain programs to build:

SPARKLE_DIR = sparkle-1.5b6

LZO_DIR=$(TOPDIR)/lzo-2.08

TUNTAP_20090913_DIR=tuntap-20090913
TUNTAP_20111101_DIR=tuntap-20111101
TUNTAP_CURRENT_DIR=tuntap-20141104

OPENSSL_SRC_DIR = openssl-1.0.1k

PKCS11_DIR=pkcs11-helper-1.11

EASY_RSA_3_DIR = easy-rsa-3.0.0-rc2

#######################################################################################
# Define treatment of deprecated functions, methods, etc. for Sparkle and OpenVPN

TB_SPARKLE_DEPRECATED_HANDLING = GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS=NO

OPENVPN_DEPRECATED_LLVN_OPTION = -Wno-deprecated-declarations
OPENVPN_DEPRECATED_GCC_MAKE_OPTION = GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS=NO

#######################################################################################
# Define other make variables:

SDKROOT=$(SDK_DIR)

CFLAGS=-isysroot $(SDKROOT) -Os -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)

BUILD_DIR = build
THIRD_PARTY_PROJS = OPENSSL

OPENSSL_BUILD_DIR = $(TOPDIR)/$(BUILD_DIR)/$(OPENSSL_SRC_DIR)
OPENSSL_DEST_DIR = $(TOPDIR)/$(BUILD_DIR)/staging/$(OPENSSL_SRC_DIR)
OPENSSL_TARGET_FILES = $(foreach f, libcrypto.a libssl.a, $(OPENSSL_DEST_DIR)/lib/$(f))

PKCS11_TUNNELBLICK_STAGING_DIR=$(TOPDIR)/$(PKCS11_DIR)/staging

DOWN_ROOT_ARCH_2_2=$(foreach f, $(TARGET_ARCHS_2_2), -arch $f)

#######################################################################################
# Define the make rules:

all: built-easy-rsa-tunnelblick \
    built-tuntap                \
    built-sparkle               \
    built-openvpn
	@echo "THIRD_PARTY: Made all third_party for Tunnelblick"

clean: built-easy-rsa-tunnelblick-clean \
       built-tuntap-clean               \
       built-sparkle-clean              \
       built-lzo-clean                  \
       built-pkcs11-helper-clean        \
       built-openvpn-clean
	rm -rf $(BUILD_DIR)
	@echo "THIRD_PARTY: Cleaned all third_party for Tunnelblick"

built-openssl-patch:
	@echo "THIRD_PARTY: Patching OpenSSL..."
	mkdir -p $(OPENSSL_BUILD_DIR)
	cd $(OPENSSL_BUILD_DIR); \
	cp -f -R -P $(TOPDIR)/$$(basename $(OPENSSL_BUILD_DIR))/ ./ ; \
	if [ -d "$(TOPDIR)/patches/openssl" ]; then \
		for patchfile in $(TOPDIR)/patches/openssl/*.diff; do \
			patch -p1 -N --dry-run -i $$patchfile > /dev/null; \
			if [ $$? == 0 ]; then \
				patch -p1 -N -i $$patchfile; \
				if [ $$? == 0 ]; then \
					touch "$${patchfile}.patch-applied" ; \
					echo "OpenSSL patch applied: $$(basename $(OPENSSL_BUILD_DIR))/$$(basename "$${patchfile}")" ; \
				else \
					echo "error: OpenSSL patch failed: $$(basename $(OPENSSL_BUILD_DIR))/$$(basename "$${patchfile}")" ; \
				fi \
			else \
				if [ -e "$${patchfile}.patch-applied" ] ; then \
					echo "warning: OpenSSL patch skipped; it has apparently already been applied: $$(basename $(OPENSSL_BUILD_DIR))/$$(basename "$${patchfile}")" ; \
				else \
					echo "error: OpenSSL patch has not been applied previously and could not be applied now: $$(basename $(OPENSSL_BUILD_DIR))/$$(basename "$${patchfile}")" ; \
				fi \
			fi \
		done \
	fi; \
	cd $(TOPDIR);
	touch built-openssl-patch
	@echo "THIRD_PARTY: Patched OpenSSL"

built-openssl: built-openssl-patch
	@echo "THIRD_PARTY: Building OpenSSL..."
	for a in $(OPENSSL_TARGET_ARCHS); do\
		echo Configure OpenSSL for $$a; \
		cd $(OPENSSL_BUILD_DIR); \
		echo Forcefully be clean; \
		$(MAKE) clean; \
		CC=$(CC) CFLAGS="$(CFLAGS)" ./Configure no-shared zlib no-zlib-dynamic no-asm no-krb5 --prefix="$(OPENSSL_DEST_DIR)/$$a" $$a; \
		echo Build OpenSSL for $$a; \
		$(MAKE) build_libs build_apps openssl.pc libssl.pc libcrypto.pc; \
		echo Install to $(OPENSSL_DEST_DIR)/$$a; \
		$(MAKE) install_sw; \
		cd -; \
	done
	ditto -v $(BUILD_DIR)/staging/$(OPENSSL_SRC_DIR)/darwin64-x86_64-cc/include $(OPENSSL_DEST_DIR)/include/x86_64
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		ditto -v $(BUILD_DIR)/staging/$(OPENSSL_SRC_DIR)/darwin-i386-cc/include $(OPENSSL_DEST_DIR)/include/i386 ; \
		ditto -v $(BUILD_DIR)/staging/$(OPENSSL_SRC_DIR)/darwin-ppc-cc/include $(OPENSSL_DEST_DIR)/include/ppc   ; \
	fi
	mkdir -p $(OPENSSL_DEST_DIR)/lib
	for t in $(OPENSSL_TARGET_FILES); do \
		lipo $(BUILD_DIR)/staging/$(OPENSSL_SRC_DIR)/darwin*/lib/$$(basename $$t) -create -output $$t; \
		ranlib $$t; \
	done
	rm -rf $(BUILD_DIR)/staging/$(OPENSSL_SRC_DIR)/darwin*
	touch built-openssl
	@echo "THIRD_PARTY: Built OpenSSL"
	
built-pkcs11-helper: built-openssl
	@echo "THIRD_PARTY: Building pkcs11-helper..."
	for a in $(TARGET_ARCHS); do \
		echo Configure PKCS11-Helper for $$a; \
		cd $(PKCS11_DIR); \
		echo Forcefully be clean; \
		$(MAKE) clean; \
		OPENSSL_CFLAGS="-I$(OPENSSL_DEST_DIR)/include/$$a" OPENSSL_LIBS="-L$(OPENSSL_DEST_DIR)/lib -lssl -lcrypto -lz" CC=$(CC) CFLAGS="$(CFLAGS) -arch $$a" ./configure --build=$$a-apple-darwin --enable-static --enable-shared=no --disable-dependency-tracking --prefix=$$(pwd)/staging_$$a --includedir=$$(pwd)/staging/include; \
		echo Build PKCS11-Helper; \
		$(MAKE); \
		echo Install to $(PKCS11_TUNNELBLICK_STAGING_DIR)_$$a; \
		$(MAKE) install; \
		cd ../; \
	done
	rm -r -f $(PKCS11_TUNNELBLICK_STAGING_DIR)/lib
	mkdir -p $(PKCS11_TUNNELBLICK_STAGING_DIR)/lib
	lipo $(PKCS11_TUNNELBLICK_STAGING_DIR)_*/lib/libpkcs11-helper.a -create -output $(PKCS11_TUNNELBLICK_STAGING_DIR)/lib/libpkcs11-helper.a
	ranlib $(PKCS11_TUNNELBLICK_STAGING_DIR)/lib/libpkcs11-helper.a
	touch built-pkcs11-helper
	@echo "THIRD_PARTY: Built pkcs11-helper"

built-pkcs11-helper-clean:
	@echo "THIRD_PARTY: Cleaning pkcs11-helper..."
	$(MAKE) -C $(PKCS11_DIR) clean
	rm -rf $(PKCS11_TUNNELBLICK_STAGING_DIR)*
	rm -f built-pkcs11-helper
	@echo "THIRD_PARTY: Cleaned pkcs11-helper"

built-lzo:
	@echo "THIRD_PARTY: Building LZO..."
	for a in $(TARGET_ARCHS); do \
		echo Configure LZO for $$a; \
		cd $(LZO_DIR); \
		echo Forcefully be clean; \
		$(MAKE) clean; \
		CC=$(CC) CFLAGS="$(CFLAGS) -arch $$a" ./configure --build=$$a-apple-darwin --disable-dependency-tracking --disable-asm --prefix=$$(pwd)/staging_$$a/ --includedir=$$(pwd)/staging/include/; \
		echo Build LZO; \
		$(MAKE); \
		echo Install to $(LZO_DIR)/staging_$$a; \
		$(MAKE) install; \
		cd ../; \
	done
	# Use lipo to create a universal library
	mkdir -p $(LZO_DIR)/staging/lib
	lipo $(LZO_DIR)/staging_*/lib/liblzo2.a -create -output $(LZO_DIR)/staging/lib/liblzo2.a
	ranlib $(LZO_DIR)/staging/lib/liblzo2.a
	touch built-lzo
	@echo "THIRD_PARTY: Built LZO"
	
built-lzo-clean:
	@echo "THIRD_PARTY: Cleaning LZO..."
	$(MAKE) -C $(LZO_DIR) clean
	rm -rf $(LZO_DIR)/staging*
	rm -f built-lzo
	@echo "THIRD_PARTY: Cleaned LZO"
	
built-openvpn-patch:
	@echo "THIRD_PARTY: Patching OpenVPN..."
	for openvpndir in `ls openvpn`; do \
		cd openvpn/$$openvpndir/openvpn; \
		if [ -d ../patches ]; then \
			for patchfile in `ls ../patches/*.diff`; do \
				if [  "$$(basename "$${patchfile}")" != "01-enable-utun.diff" \
				   -o $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
					patch -p1 -N --dry-run -i $$patchfile > /dev/null; \
					if [ $$? == 0 ]; then \
						patch -p1 -N -i $$patchfile; \
						if [ $$? == 0 ]; then \
							touch "$${patchfile}.patch-applied" ; \
							echo "OpenVPN patch applied: $$openvpndir/openvpn/$$(basename "$${patchfile}")" ; \
						else \
							echo "error: OpenVPN patch failed: $$openvpndir/openvpn/$$(basename "$${patchfile}")" ; \
						fi \
					else \
						if [ -e "$${patchfile}.patch-applied" ] ; then \
							echo "warning: OpenVPN patch skipped; it has apparently already been applied: $$openvpndir/openvpn/$$(basename "$${patchfile}")" ; \
						else \
							echo "error: OpenVPN patch has not been applied previously and could not be applied now: $$openvpndir/openvpn/$$(basename "$${patchfile}")" ; \
						fi \
					fi \
				else \
					echo "OpenVPN patch skipped because not building with Xcode 3: $$openvpndir/openvpn/$$(basename "$${patchfile}")" ; \
				fi \
			done; \
		else \
			echo "No OpenVPN patches for $$openvpndir" ; \
		fi; \
		cd ../../../; \
	done
	touch built-openvpn-patch
	@echo "THIRD_PARTY: Patched OpenVPN"
	
built-openvpn: built-openvpn-patch built-lzo built-pkcs11-helper built-openssl
	@echo "THIRD_PARTY: Building OpenVPN..."
	for openvpndir in `ls openvpn`; do \
		cd openvpn/$$openvpndir/openvpn; \
		if [ -d src ]; then \
			echo "Making $$openvpndir from post-2.3-alpha1 build system"; \
			for a in $(TARGET_ARCHS); do \
				$(MAKE) clean; \
				CC="$(CC)" \
				CFLAGS="$(CFLAGS) -arch $$a $(OPENVPN_DEPRECATED_LLVN_OPTION) $(TB_USE_RFC_3542)"\
				LZO_CFLAGS="-I$(LZO_DIR)/staging/include" \
				LZO_LIBS="-L$(LZO_DIR)/staging/lib -llzo2" \
				OPENSSL_SSL_CFLAGS="-I$(OPENSSL_DEST_DIR)/include/$$a" \
				OPENSSL_SSL_LIBS="$(OPENSSL_DEST_DIR)/lib/libssl.a" \
				OPENSSL_CRYPTO_CFLAGS="-I$(OPENSSL_DEST_DIR)/include/$$a" \
				OPENSSL_CRYPTO_LIBS="$(OPENSSL_DEST_DIR)/lib/libcrypto.a \
				                     -lz" \
				PKCS11_HELPER_CFLAGS="-I$(PKCS11_TUNNELBLICK_STAGING_DIR)/include/" \
				PKCS11_HELPER_LIBS="-L$(PKCS11_TUNNELBLICK_STAGING_DIR)/lib \
				                    -lpkcs11-helper" \
				OS_VERSION=`uname -r` \
					autoreconf -i -v; \
					                \
				CC="$(CC)" \
				CFLAGS="$(CFLAGS) -arch $$a $(OPENVPN_DEPRECATED_LLVN_OPTION)  $(TB_USE_RFC_3542)" \
				LZO_CFLAGS="-I$(LZO_DIR)/staging/include" \
				LZO_LIBS="-L$(LZO_DIR)/staging/lib -llzo2" \
				OPENSSL_SSL_CFLAGS="-I$(OPENSSL_DEST_DIR)/include/$$a" \
				OPENSSL_SSL_LIBS="$(OPENSSL_DEST_DIR)/lib/libssl.a" \
				OPENSSL_CRYPTO_CFLAGS="-I$(OPENSSL_DEST_DIR)/include/$$a" \
				OPENSSL_CRYPTO_LIBS="$(OPENSSL_DEST_DIR)/lib/libcrypto.a \
				                     -lz" \
				PKCS11_HELPER_CFLAGS="-I$(PKCS11_TUNNELBLICK_STAGING_DIR)/include/" \
				PKCS11_HELPER_LIBS="-L$(PKCS11_TUNNELBLICK_STAGING_DIR)/lib \
				                    -lpkcs11-helper" \
				OS_VERSION=`uname -r` \
					./configure \
						 --build=$$a-apple-darwin \
						 --enable-static=yes \
						 --enable-shared \
						 --enable-pkcs11 \
						 --disable-debug \
						 --disable-plugin-auth-pam \
						 --disable-dependency-tracking \
						 --enable-crypto \
						 --enable-ssl ; \
						                \
				$(MAKE) LIBS="$(OPENSSL_TARGET_FILES) \
							  -L$(PKCS11_TUNNELBLICK_STAGING_DIR)/lib \
							  -lpkcs11-helper \
							  -L$(LZO_DIR)/staging/lib \
							  -llzo2" \
						$(OPENVPN_DEPRECATED_GCC_MAKE_OPTION) ; \
						                                        \
				echo "Making down-root plugin" ; \
				$(MAKE) -C src/plugins/down-root clean ; \
				$(MAKE) LDFLAGS="-bundle -Wl,-dylib_install_name,openvpn-down-root.so" -C src/plugins/down-root ; \
	 			mv src/openvpn/openvpn ../openvpn_tblk_$$a; \
                mv src/plugins/down-root/.libs/openvpn-plugin-down-root.so ../openvpn-plugin-down-root.so_tblk_$$a; \
	 		done; \
			lipo ../openvpn-plugin-down-root.so_tblk_* -create -output ../openvpn-down-root.so; \
			rm ../openvpn-plugin-down-root.so_tblk_* ; \
		else \
			echo "Making $$openvpndir from pre-2.3-alpha2 build system"; \
			for a in $(TARGET_ARCHS_2_2); do \
				$(MAKE) clean; \
				autoreconf -i -v; \
				CC=$(CC) CFLAGS="$(CFLAGS) -arch $$a" OS_VERSION=`uname -r` ./configure --build=$$a-apple-darwin --with-lzo-headers=$(LZO_DIR)/staging/include --with-lzo-lib=$(LZO_DIR)/staging/lib --with-pkcs11-helper-headers=$(PKCS11_TUNNELBLICK_STAGING_DIR)/include --with-pkcs11-helper-lib=$(PKCS11_TUNNELBLICK_STAGING_DIR)/lib --with-ssl-headers=$(OPENSSL_DEST_DIR)/include/$$a --with-ssl-lib=$(OPENSSL_DEST_DIR)/lib --disable-dependency-tracking; \
				$(MAKE) LIBS="$(OPENSSL_TARGET_FILES) -lpkcs11-helper -llzo2 -lz"; \
				mv openvpn ../openvpn_tblk_$$a; \
			done; \
			$(MAKE) CC_FLAGS="-Wall -isysroot $(SDKROOT) -Os -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET) $(DOWN_ROOT_ARCH_2_2)" -C plugin/down-root; \
			mv plugin/down-root/openvpn-down-root.so ../openvpn-down-root.so; \
		fi; \
		cd ../; \
		lipo openvpn_tblk_* -create -output openvpn-executable; \
		rm openvpn_tblk_* ; \
		cd ../../; \
	done
	touch built-openvpn
	@echo "THIRD_PARTY: Built OpenVPN"

built-openvpn-clean:
	@echo "THIRD_PARTY: Cleaning OpenVPN..."
	for openvpndir in `ls openvpn`; do \
		$(MAKE) -C openvpn/$$openvpndir/openvpn/ clean; \
		$(MAKE) -C openvpn/$$openvpndir/openvpn/plugin/down-root clean; \
		rm -f openvpn/$$openvpndir/openvpn_tblk_*; \
		rm -f openvpn/$$openvpndir/openvpn-executable; \
		rm -f openvpn/$$openvpndir/openvpn-down-root.so; \
	done
	rm -f built-openvpn
	@echo "THIRD_PARTY: Cleaned OpenVPN"

built-tuntap-patch:
	@echo "THIRD_PARTY: Patching Tun/Tap..."
	for tuntapdir in `ls tuntap`; do \
		cd tuntap/$$tuntapdir/tuntap; \
		for patchfile in ../patches/*.diff; do \
			patch -p0 -N --dry-run -i $$patchfile > /dev/null; \
			if [ $$? == 0 ]; then \
				patch -p0 -N -i $$patchfile; \
				if [ $$? == 0 ]; then \
					touch "$${patchfile}.patch-applied" ; \
					echo "Tun/Tap patch applied: $$tuntapdir/tuntap/$$(basename "$${patchfile}")" ; \
				else \
					echo "error: Tun/Tap patch failed: $$tuntapdir/tuntap/$$(basename "$${patchfile}")" ; \
				fi \
			else \
				if [ -e "$${patchfile}.patch-applied" ] ; then \
					echo "warning: Tun/Tap patch skipped; it has apparently already been applied: $$tuntapdir/tuntap/$$(basename "$${patchfile}")" ; \
				else \
					echo "error: Tun/Tap patch has not been applied previously and could not be applied now: $$tuntapdir/tuntap/$$(basename "$${patchfile}")" ; \
				fi \
			fi \
		done; \
		cd ../../../; \
	done
	touch built-tuntap-patch
	@echo "THIRD_PARTY: Patched Tun/Tap"

built-tuntap: built-tuntap-patch
	@echo "THIRD_PARTY: Building Tun/Tap for '$(ARCHS)' with deploy-target '$(MACOSX_DEPLOYMENT_TARGET)' and SDK path '$(SDK_DIR)'" ;
	export TUNTAP_ARCHS="$(foreach f, $(TARGET_ARCHS), -arch $f)" ; \
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		$(MAKE) -C tuntap/$(TUNTAP_20090913_DIR)/tuntap/; \
		mv tuntap/$(TUNTAP_20090913_DIR)/tuntap/tap.kext tap-20090913.kext; \
		mv tuntap/$(TUNTAP_20090913_DIR)/tuntap/tun.kext tun-20090913.kext; \
	fi ; \
	$(MAKE) -C tuntap/$(TUNTAP_20111101_DIR)/tuntap/; \
	mv tuntap/$(TUNTAP_20111101_DIR)/tuntap/tap.kext tap-20111101.kext; \
	mv tuntap/$(TUNTAP_20111101_DIR)/tuntap/tun.kext tun-20111101.kext; \
	$(MAKE) -C tuntap/$(TUNTAP_CURRENT_DIR)/tuntap/; \
	mv tuntap/$(TUNTAP_CURRENT_DIR)/tuntap/tap.kext tap.kext; \
	mv tuntap/$(TUNTAP_CURRENT_DIR)/tuntap/tun.kext tun.kext
	touch built-tuntap
	@echo "THIRD_PARTY: Built Tun/Tap"

built-tuntap-clean:
	@echo "THIRD_PARTY: Cleaning Tun/Tap..."
	$(MAKE) -C tuntap/$(TUNTAP_20090913_DIR)/tuntap/ clean; \
	rm -f -R tap-20090913.kext; \
	rm -f -R tun-20090913.kext; \
	$(MAKE) -C tuntap/$(TUNTAP_20111101_DIR)/tuntap/ clean; \
	rm -f -R tap-20111101.kext; \
	rm -f -R tun-20111101.kext; \
	$(MAKE) -C tuntap/$(TUNTAP_CURRENT_DIR)/tuntap/ clean; \
	rm -f -R tap.kext; \
	rm -f -R tun.kext
	rm -f built-tuntap
	@echo "THIRD_PARTY: Cleaned Tun/Tap"

built-sparkle-patch:
	@echo "THIRD_PARTY: Patching Sparkle.framework..."
	cd "$(SPARKLE_DIR)"; \
	if [ -d ../patches/sparkle ]; then \
		for patchfile in `ls ../patches/sparkle/*.diff`; do \
			patch -p1 -N --dry-run -i $$patchfile > /dev/null; \
			if [ $$? == 0 ]; then \
				patch -p1 -N -i $$patchfile; \
				if [ $$? == 0 ]; then \
				    touch "$${patchfile}.patch-applied" ; \
					echo "Sparkle patch applied: $(SPARKLE_DIR)/$$(basename "$${patchfile}")" ; \
				else \
					echo "error: Sparkle patch failed: $(SPARKLE_DIR)/$$(basename "$${patchfile}")" ; \
				fi \
			else \
				if [ -e "$${patchfile}.patch-applied" ] ; then \
					echo "warning: Sparkle patch skipped; it has apparently already been applied: $(SPARKLE_DIR)/$$(basename "$${patchfile}")" ; \
				else \
					echo "error: Sparkle patch has not been applied previously and could not be applied now: $(SPARKLE_DIR)/$$(basename "$${patchfile}")" ; \
				fi \
			fi \
		done; \
		cp -f -p -X "../patches/sparkle/de.lproj/Sparkle.strings" "Extras/Source Code/de.lproj/Sparkle.strings" ; \
		cp -f -p -X "../patches/sparkle/it.lproj/Sparkle.strings" "Extras/Source Code/it.lproj/Sparkle.strings" ; \
		cp -f -p -X "../patches/sparkle/ru.lproj/Sparkle.strings" "Extras/Source Code/ru.lproj/Sparkle.strings" ; \
		cp -f -p -X "../patches/sparkle/sv.lproj/Sparkle.strings" "Extras/Source Code/sv.lproj/Sparkle.strings" ; \
		echo "Sparkle de, it, ru, and sv UTF-16 .strings files replaced with UTF-8 .strings files." ; \
		if [ ! -d "Extras/Source Code/build/Release" ] ; then \
			mkdir -p "Extras/Source Code/build/Release" ; \
		fi ; \
	else \
		echo "No Sparkle patches" ; \
	fi; \
	cd ../
	touch built-sparkle-patch
	@echo "THIRD_PARTY: Patched Sparkle.framework"

built-sparkle: built-sparkle-patch
	@echo "THIRD_PARTY: Building Sparkle.framework for '$(ARCHS)' with deploy-target '$(MACOSX_DEPLOYMENT_TARGET)' and SDK path '$(SDK_DIR)'" ;
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING)" ; \
	else \
		SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING) -arch $(TARGET_ARCHS) -sdk $(SDK_DIR) BUILD_DIR=build MACOSX_DEPLOYMENT_TARGET=$(MACOSX_DEPLOYMENT_TARGET)" ; \
	fi ; \
	cd "$(SPARKLE_DIR)/Extras/Source Code";            \
	xcodebuild -project Sparkle.xcodeproj              \
			   -target Sparkle                         \
			   -configuration Release                  \
			   $$SPARKLE_FLAGS                         \
			   clean ;                                 \
	xcodebuild -project Sparkle.xcodeproj              \
			   -target Sparkle                         \
			   -configuration Release                  \
			   $$SPARKLE_FLAGS                         \
			   GCC_TREAT_WARNINGS_AS_ERRORS=NO         \
			   build ;                                 \
	cd ../../../ ;
	rm -f -r "Sparkle.framework" ;
	cp -X -f -R "$(SPARKLE_DIR)/Extras/Source Code/build/Release/Sparkle.framework" "Sparkle.framework" ;
	touch built-sparkle
	@echo "THIRD_PARTY: Built Sparkle.framework"

built-sparkle-clean:
	@echo "THIRD_PARTY: Cleaning Sparkle.framework..."
	rm -f -r "Sparkle.framework"
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING)" ; \
	else \
		SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING) -arch $(TARGET_ARCHS) -sdk $(SDK_DIR) BUILD_DIR=build MACOSX_DEPLOYMENT_TARGET=$(MACOSX_DEPLOYMENT_TARGET)" ; \
	fi ; \
	cd "$(SPARKLE_DIR)/Extras/Source Code";           \
	xcodebuild -project Sparkle.xcodeproj             \
			   -target Sparkle                        \
			   -configuration Release                 \
			   $$SPARKLE_FLAGS                        \
			   clean ;                                \
	cd ../../../
	rm -f built-sparkle
	@echo "THIRD_PARTY: Cleaned Sparkle.framework"

built-easy-rsa-tunnelblick:
	@echo "THIRD_PARTY: Building easy-rsa-tunnelblick..."
	rm -f -r "easy-rsa-tunnelblick"
	mkdir "easy-rsa-tunnelblick"
	rsync -aq --exclude=".*"    "easy-rsa/easy-rsa-2-tunnelblick/" "easy-rsa-tunnelblick"
	mkdir                                                          "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f -R "easy-rsa/$(EASY_RSA_3_DIR)/doc"                   "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f -R "easy-rsa/$(EASY_RSA_3_DIR)/easyrsa3"              "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f -R "easy-rsa/$(EASY_RSA_3_DIR)/Licensing"             "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f    "easy-rsa/$(EASY_RSA_3_DIR)/ChangeLog"             "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f    "easy-rsa/$(EASY_RSA_3_DIR)/COPYING"               "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f    "easy-rsa/$(EASY_RSA_3_DIR)/KNOWN_ISSUES"          "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f    "easy-rsa/$(EASY_RSA_3_DIR)/README"                "easy-rsa-tunnelblick/EasyRSA-3"
	cp -X -f    "easy-rsa/$(EASY_RSA_3_DIR)/README.quickstart.md"  "easy-rsa-tunnelblick/EasyRSA-3"
	@echo "$(EASY_RSA_3_DIR)"  |  sed -e 's/easy-rsa\-//'  >       "easy-rsa-tunnelblick/v3version.txt"
	touch built-easy-rsa-tunnelblick
	@echo "THIRD_PARTY: Built easy-rsa-tunnelblick"

built-easy-rsa-tunnelblick-clean:
	@echo "THIRD_PARTY: Cleaning easy-rsa-tunnelblick..."
	rm -f -r "easy-rsa-tunnelblick"
	rm -f built-easy-rsa-tunnelblick
	@echo "THIRD_PARTY: Cleaned easy-rsa-tunnelblick"
