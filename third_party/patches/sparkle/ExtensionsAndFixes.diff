diff -x .DS_Store -x '*.svn' -u -r Sparkle-1.5b6/Extras/Source Code/SUAppcastItem.h patched/Extras/Source Code/SUAppcastItem.h
--- Sparkle-1.5b6/Extras/Source Code/SUAppcastItem.h	2008-09-13 23:55:00.000000000 -0400
+++ patched/Extras/Source Code/SUAppcastItem.h	2012-08-09 06:10:04.000000000 -0400
@@ -18,6 +18,11 @@
 	
 	NSString *DSASignature;	
 	NSString *minimumSystemVersion;
+	NSString *maximumSystemVersion;
+	NSString *minimumAppVersion;
+	NSString *maximumAppVersion;
+	NSString *allowedProcessorTypes;
+	NSString *allowedProcessorWordSizes;
 	
 	NSURL *fileURL;
 	NSString *versionString;
@@ -38,6 +43,11 @@
 - (NSURL *)fileURL;
 - (NSString *)DSASignature;
 - (NSString *)minimumSystemVersion;
+- (NSString *)maximumSystemVersion;
+- (NSString *)minimumAppVersion;
+- (NSString *)maximumAppVersion;
+- (NSString *)allowedProcessorTypes;
+- (NSString *)allowedProcessorWordSizes;
 
 // Returns the dictionary provided in initWithDictionary; this might be useful later for extensions.
 - (NSDictionary *)propertiesDictionary;
diff -x .DS_Store -x '*.svn' -u -r Sparkle-1.5b6/Extras/Source Code/SUAppcastItem.m patched/Extras/Source Code/SUAppcastItem.m
--- Sparkle-1.5b6/Extras/Source Code/SUAppcastItem.m	2008-09-13 23:55:00.000000000 -0400
+++ patched/Extras/Source Code/SUAppcastItem.m	2012-08-09 06:12:49.000000000 -0400
@@ -101,6 +101,46 @@
 	minimumSystemVersion = [systemVersionString copy];
 }
 
+- (NSString *)maximumSystemVersion { return [[maximumSystemVersion retain] autorelease]; }
+- (void)setMaximumSystemVersion:(NSString *)systemVersionString
+{
+	if (maximumSystemVersion == systemVersionString) return;
+	[maximumSystemVersion release];
+	maximumSystemVersion = [systemVersionString copy];
+}
+
+- (NSString *)minimumAppVersion { return [[minimumAppVersion retain] autorelease]; }
+- (void)setMinimumAppVersion:(NSString *)appVersionString
+{
+	if (minimumAppVersion == appVersionString) return;
+	[minimumAppVersion release];
+	minimumAppVersion = [appVersionString copy];
+}
+
+- (NSString *)maximumAppVersion { return [[maximumAppVersion retain] autorelease]; }
+- (void)setMaximumAppVersion:(NSString *)appVersionString
+{
+	if (maximumAppVersion == appVersionString) return;
+	[maximumAppVersion release];
+	maximumAppVersion = [appVersionString copy];
+}
+
+- (NSString *)allowedProcessorTypes { return [[allowedProcessorTypes retain] autorelease]; }
+- (void)setAllowedProcessorTypes:(NSString *)processorTypesString
+{
+	if (allowedProcessorTypes == processorTypesString) return;
+	[allowedProcessorTypes release];
+	allowedProcessorTypes = [processorTypesString copy];
+}
+
+- (NSString *)allowedProcessorWordSizes { return [[allowedProcessorWordSizes retain] autorelease]; }
+- (void)setAllowedProcessorWordSizes:(NSString *)processorWordSizesString
+{
+	if (allowedProcessorWordSizes == processorWordSizesString) return;
+	[allowedProcessorWordSizes release];
+	allowedProcessorWordSizes = [processorWordSizesString copy];
+}
+
 - initWithDictionary:(NSDictionary *)dict
 {
 	self = [super init];
@@ -143,6 +183,11 @@
             
             [self setVersionString:newVersion];
             [self setMinimumSystemVersion:[dict objectForKey:@"sparkle:minimumSystemVersion"]];
+            [self setMaximumSystemVersion:[dict objectForKey:@"sparkle:maximumSystemVersion"]];
+            [self setMinimumAppVersion:[dict objectForKey:@"sparkle:minimumAppVersion"]];
+            [self setMaximumAppVersion:[dict objectForKey:@"sparkle:maximumAppVersion"]];
+            [self setAllowedProcessorTypes:[dict objectForKey:@"sparkle:allowedProcessorTypes"]];
+            [self setAllowedProcessorWordSizes:[dict objectForKey:@"sparkle:allowedProcessorWordSizes"]];
             
             NSString *shortVersionString = [enclosure objectForKey:@"sparkle:shortVersionString"];
             if (shortVersionString)
diff -x .DS_Store -x '*.svn' -u -r Sparkle-1.5b6/Extras/Source Code/SUBasicUpdateDriver.m patched/Extras/Source Code/SUBasicUpdateDriver.m
--- Sparkle-1.5b6/Extras/Source Code/SUBasicUpdateDriver.m	2008-09-13 23:55:00.000000000 -0400
+++ patched/Extras/Source Code/SUBasicUpdateDriver.m	2012-08-09 08:22:44.000000000 -0400
@@ -32,7 +32,7 @@
 	[appcast setDelegate:self];
 	NSString *userAgent = [NSString stringWithFormat: @"%@/%@ Sparkle/%@", [aHost name], [aHost displayVersion], ([SPARKLE_BUNDLE objectForInfoDictionaryKey:@"CFBundleVersion"] ?: nil)];
 	NSData * cleanedAgent = [userAgent dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
-	userAgent = [NSString stringWithCString:[cleanedAgent bytes] length:[cleanedAgent length]];
+	userAgent = [[[NSString alloc] initWithData: cleanedAgent encoding: NSASCIIStringEncoding] autorelease];
 	[appcast setUserAgentString:userAgent];
 	[appcast fetchAppcastFromURL:URL];
 }
@@ -59,8 +59,84 @@
 
 - (BOOL)hostSupportsItem:(SUAppcastItem *)ui
 {
-	if ([ui minimumSystemVersion] == nil || [[ui minimumSystemVersion] isEqualToString:@""]) { return YES; }
-	return [[SUStandardVersionComparator defaultComparator] compareVersion:[ui minimumSystemVersion] toVersion:[SUHost systemVersionString]] != NSOrderedDescending;
+    NSString * thisItemDescription = [ui itemDescription];
+    if (  thisItemDescription  ) {
+        thisItemDescription = [NSString stringWithFormat:@" %@", thisItemDescription];
+    } else {
+        thisItemDescription = @"";
+    }
+    
+	if ([ui minimumSystemVersion] && ( ! [[ui minimumSystemVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui minimumSystemVersion] toVersion:[SUHost systemVersionString]] == NSOrderedDescending)
+        {
+            NSLog(@"DEBUG: Updater%@: systemVersion %@ does not satisfy minimumSystemVersion %@", thisItemDescription, [SUHost systemVersionString], [ui minimumSystemVersion]);
+            return NO;
+        } else {
+            NSLog(@"DEBUG: Updater%@: systemVersion %@ satisfies minimumSystemVersion %@", thisItemDescription, [SUHost systemVersionString], [ui minimumSystemVersion]);
+		}
+        
+    }
+    
+	if ([ui maximumSystemVersion] && ( ! [[ui maximumSystemVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui maximumSystemVersion] toVersion:[SUHost systemVersionString]] == NSOrderedAscending)
+        {
+            NSLog(@"DEBUG: Updater%@: systemVersion %@ does not satisfy maximumSystemVersion %@", thisItemDescription, [SUHost systemVersionString], [ui maximumSystemVersion]);
+            return NO;
+        } else {
+            NSLog(@"DEBUG: Updater%@: systemVersion %@ satisfies maximumSystemVersion %@", thisItemDescription, [SUHost systemVersionString], [ui maximumSystemVersion]);
+        }
+    }
+    
+	if ([ui minimumAppVersion] && ( ! [[ui minimumAppVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui minimumAppVersion] toVersion:[host version]] == NSOrderedDescending)
+        {
+            NSLog(@"DEBUG: Updater%@: appVersion %@ does not satisfy minimumAppVersion %@", thisItemDescription, [host version], [ui minimumAppVersion]);
+            return NO;
+        } else {
+            NSLog(@"DEBUG: Updater%@: appVersion %@ satisfies minimumAppVersion %@", thisItemDescription, [host version], [ui minimumAppVersion]);
+		}
+        
+    }
+    
+	if ([ui maximumAppVersion] && ( ! [[ui maximumAppVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui maximumAppVersion] toVersion:[host version]] == NSOrderedAscending)
+        {
+            NSLog(@"DEBUG: Updater%@: appVersion %@ does not satisfy maximumAppVersion %@", thisItemDescription, [host version], [ui maximumAppVersion]);
+            return NO;
+        } else {
+            NSLog(@"DEBUG: Updater%@: appVersion %@ satisfies maximumAppVersion %@", thisItemDescription, [host version], [ui maximumAppVersion]);
+        }
+    }
+    
+	if ([ui allowedProcessorTypes] && ( ! [[ui allowedProcessorTypes] isEqualToString:@""]) )
+    {
+        if ([[NSString stringWithFormat: @"%@ ", [ui allowedProcessorTypes]]
+             rangeOfString: [NSString stringWithFormat: @"%@ ", [SUHost processorTypeString]]].length == 0)
+        {
+            NSLog(@"DEBUG: Updater%@: processorType %@ does not satisfy allowedProcessorTypes %@", thisItemDescription, [SUHost processorTypeString], [ui allowedProcessorTypes]);
+            return NO;
+        } else {
+            NSLog(@"DEBUG: Updater%@: processorType %@ satisfies allowedProcessorTypes %@", thisItemDescription, [SUHost processorTypeString], [ui allowedProcessorTypes]);
+        }
+    }
+    
+	if ([ui allowedProcessorWordSizes] && ( ! [[ui allowedProcessorWordSizes] isEqualToString:@""]) )
+    {
+        if ([[NSString stringWithFormat: @"%@ ", [ui allowedProcessorWordSizes]]
+             rangeOfString: [NSString stringWithFormat: @"%@ ", [SUHost processorWordSizeString]]].length == 0)
+        {
+            NSLog(@"DEBUG: Updater%@: processorWordSize %@ does not satisfy allowedProcessorWordSizes %@", thisItemDescription, [SUHost processorWordSizeString], [ui allowedProcessorWordSizes]);
+            return NO;
+        } else {
+            NSLog(@"DEBUG: Updater%@: processorWordSize %@ satisfies allowedProcessorWordSizes %@", thisItemDescription, [SUHost processorWordSizeString], [ui allowedProcessorWordSizes]);
+        }
+    }
+    
+    return YES;
 }
 
 - (BOOL)itemContainsSkippedVersion:(SUAppcastItem *)ui
diff -x .DS_Store -x '*.svn' -u -r Sparkle-1.5b6/Extras/Source Code/SUHost.h patched/Extras/Source Code/SUHost.h
--- Sparkle-1.5b6/Extras/Source Code/SUHost.h	2008-09-13 23:55:00.000000000 -0400
+++ patched/Extras/Source Code/SUHost.h	2012-08-08 19:49:47.000000000 -0400
@@ -13,6 +13,8 @@
 }
 
 + (NSString *)systemVersionString;
++ (NSString *)processorTypeString;
++ (NSString *)processorWordSizeString;
 
 - (id)initWithBundle:(NSBundle *)aBundle;
 - (NSBundle *)bundle;
diff -x .DS_Store -x '*.svn' -u -r Sparkle-1.5b6/Extras/Source Code/SUHost.m patched/Extras/Source Code/SUHost.m
--- Sparkle-1.5b6/Extras/Source Code/SUHost.m	2008-09-13 23:55:00.000000000 -0400
+++ patched/Extras/Source Code/SUHost.m	2012-08-09 07:31:23.000000000 -0400
@@ -8,7 +8,8 @@
 #import "SUHost.h"
 
 #import "SUSystemProfiler.h"
-#import <sys/mount.h> // For statfs for isRunningOnReadOnlyVolume
+#import <sys/mount.h>  // For statfs for isRunningOnReadOnlyVolume
+#import <sys/sysctl.h> // For sysctlbyname for processorWordSizeString
 
 @implementation SUHost
 
@@ -111,7 +112,7 @@
 	// More likely, we've got a reference to a Resources file by filename:
 	NSString *keyFilename = [self objectForInfoDictionaryKey:SUPublicDSAKeyFileKey];
 	if (!keyFilename) { return nil; }
-	return [NSString stringWithContentsOfFile:[bundle pathForResource:keyFilename ofType:nil]];
+	return [NSString stringWithContentsOfFile:[bundle pathForResource:keyFilename ofType:nil] encoding:NSASCIIStringEncoding error:nil];
 }
 
 - (NSArray *)systemProfile
@@ -222,4 +223,33 @@
 	return verStr;
 }
 
++ (NSString *)processorTypeString
+{
+#if defined __i386__ || defined __x86_64__
+    return @"Intel";
+#elif defined __ppc__ || defined __ppc64__
+    return @"PPC";
+#elif defined __arm__
+    return @"ARM";
+#else
+    return @"Unknown";
+#endif
+}
+
++ (NSString *)processorWordSizeString
+{
+    // (We don't use code similar to that in processorTypeString because we may be running a 64-bit processor in 32-bit mode.)
+    // The following code has been adapted from systemProfileArrayForHost:
+	int error = 0 ;
+	int value = 0 ;
+	unsigned long length = sizeof(value) ;
+
+    error = sysctlbyname("hw.cpu64bit_capable", &value, &length, NULL, 0);
+	if(error != 0)
+		error = sysctlbyname("hw.optional.x86_64", &value, &length, NULL, 0); //x86 specific
+	if(error != 0)
+		error = sysctlbyname("hw.optional.64bitops", &value, &length, NULL, 0); //PPC specific
+	
+	return (error == 0) ? @"64" : @"32";
+}
 @end
Only in patched/Extras/Source Code/Sparkle.xcodeproj: jonathankbullard.mode1v3
Only in patched/Extras/Source Code/Sparkle.xcodeproj: jonathankbullard.pbxuser
diff -x .DS_Store -x '*.svn' -u -r Sparkle-1.5b6/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj patched/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj
--- Sparkle-1.5b6/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj	2008-09-13 23:55:00.000000000 -0400
+++ patched/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj	2012-08-09 08:48:49.000000000 -0400
@@ -802,7 +802,7 @@
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 			shellPath = "/usr/bin/env ruby";
-			shellScript = "resources = \"#{ENV[\"BUILT_PRODUCTS_DIR\"]}/#{ENV[\"WRAPPER_NAME\"]}/Resources\"\n`ln -s \"#{resources}/fr.lproj\" \"#{resources}/fr_CA.lproj\"`";
+			shellScript = "resources = \"#{ENV[\"BUILT_PRODUCTS_DIR\"]}/#{ENV[\"WRAPPER_NAME\"]}/Resources\"\n`ln -s \"fr.lproj\" \"#{resources}/fr_CA.lproj\"`";
 		};
 /* End PBXShellScriptBuildPhase section */
 
Only in patched/Extras/Source Code: build
